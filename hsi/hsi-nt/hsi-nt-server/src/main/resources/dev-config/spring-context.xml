<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			    		http://www.springframework.org/schema/context 
			    		http://www.springframework.org/schema/context/spring-context-3.2.xsd
			   			http://www.springframework.org/schema/aop 
			   			http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			   			http://www.springframework.org/schema/tx  
			   			http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
			   			http://www.springframework.org/schema/task 
			   			http://www.springframework.org/schema/task/spring-task-3.2.xsd">

	<context:component-scan base-package="com.gy.hsi.nt.server"/>
	
	<bean id="propertyConfigurer" class="com.gy.hsi.ds.param.HsPropertiesConfigurer">
          <!-- disconf.properties存放路径 -->
          <constructor-arg name="disconfFile"
                  value="file:${user.dir}/conf/hsi-nt/disconf.properties" />

          <!-- 本地配置文件[只有本地存在, 远程没有上传] -->
          <property name="locations">
                  <list></list>
          </property>

          <!-- 远程配置文件[远程存在, 将会同步到本地] -->
          <property name="remoteLocations">
          	<list>
                <value>file:${user.dir}/conf/hsi-nt/hsi-nt.properties</value>
				<value>file:${user.dir}/conf/hsi-nt/jdbc.properties</value>
				<value>file:${user.dir}/conf/hsi-nt/dubbo.properties</value>
				<value>file:${user.dir}/conf/hsi-nt/redis.properties</value>
             </list>
          </property>
    </bean>

	<!-- 数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="maxActive" value="${jdbc.maxActive}"/>
		<property name="initialSize" value="${jdbc.initialSize}"/>
		<property name="maxWait" value="${jdbc.maxWait}"/>
		<property name="maxIdle" value="${jdbc.maxIdle}"/>
		<property name="minIdle" value="${jdbc.minIdle}"/>
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
		<property name="testOnReturn" value="${jdbc.testOnReturn}"/>
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
		<property name="logAbandoned" value="${jdbc.logAbandoned}"/>
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath*:mapping/*.xml"/>
	</bean>
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gy.hsi.nt.server.mapper"/>
	</bean>

	<!-- 可通过注解控制事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<import resource="classpath:/dev-config/spring-dubbo-provider.xml"/>
	<import resource="classpath:/dev-config/spring-rabbit.xml"/>
	<import resource="classpath:/dev-config/spring-threadpool.xml"/>
<!-- 	<import resource="classpath:/dev-config/spring-redis-client.xml"/> -->
	<import resource="classpath:spring/hsxt-redis-spring.xml" />

	<!-- 加载参数 -->
	<bean id="loadCache" init-method="init" class="com.gy.hsi.nt.server.init.InitCache"/>

	<!-- 消息结果统一处理 -->
	<aop:aspectj-autoproxy />
	<bean id="noticeResultHandle" class="com.gy.hsi.nt.server.aop.NoticeResultHandle"/>

	<!-- 任务定时器 -->
	<task:scheduled-tasks>
		<task:scheduled ref="timingTastService" method="resendMsgTast"
			cron="0 0/5 * * * ?"/>
			<!-- 注释定时删除彻底失败和成功的消息任务-->
<!-- 		<task:scheduled ref="timingTastService" method="removeAbandonAndSended" -->
<!-- 			cron="0 00 04 ? * MON"/> -->
	</task:scheduled-tasks>

</beans>